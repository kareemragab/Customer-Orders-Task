================================================================================
CUSTOMER ORDERS APPLICATION
Backend Developer Technical Evaluation Project
================================================================================

PROJECT OVERVIEW
----------------
A .NET 9 Blazor Server application for managing customers and orders using
DevExpress XPO as ORM and SQL Server LocalDB.

TECHNOLOGY STACK
----------------
- .NET 9 (Blazor Server)
- DevExpress XPO 24.1.4 (ORM)
- SQL Server LocalDB
- DevExpress Reporting 24.1.4
- C#

Note: Used DevExpress 24.1.4 instead of 25.1.3 as it was not available in
the package source. Version 24.1.4 provides all required features.

BUILD AND RUN
-------------
1. Prerequisites:
   - Visual Studio 2022+ with SQL Server LocalDB
   - .NET 9 SDK

2. Steps:
   - Open CustomerOrders.sln
   - Restore NuGet packages (automatic)
   - Run Project
   - Database will be created automatically on first run with sample data

FEATURES
--------
- Customer CRUD operations (Customers page)
- Order CRUD operations (Orders page)
- Dashboard with statistics
- Customer Order Summary Report (Customer Report page)

VALIDATIONS
-----------
Customer: Name required, CustomerID unique
Order: Amount > 0, Date not future, Customer required

DATABASE
--------
Connection String:
Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=CustomerOrdersDB;Integrated Security=True;

The database schema is auto-generated by XPO on first run.

DESIGN CHOICES
--------------
1. Architecture: Layered architecture with Blazor (presentation), Models
   (business logic + validation), XPO (data access), and SQL Server LocalDB.

2. ORM: Used DevExpress XPO for object-relational mapping to avoid writing
   raw SQL queries and to leverage automatic schema generation.

3. Validation: Implemented in OnSaving() method of entity classes to ensure
   data integrity at the data layer level.

4. Data Seeding: Created DataSeeder service to populate initial sample data
   (5 customers, 12 orders) on first run.

5. Unit of Work Pattern: Used for transaction management and resource cleanup.

REPORT LOCATION
---------------
Report Class: Reports/CustomerOrderSummaryReport.cs
Report Viewer Page: Components/Pages/CustomerReport.razor

To view the report, run the application and click "Customer Report" in the menu.

PROJECT STRUCTURE
-----------------
- Models/ - Entity classes (Customer, Order)
- Services/ - DataSeeder service
- Reports/ - Report class definition
- Components/Pages/ - Blazor pages for UI
- Program.cs - Application startup and configuration

================================================================================