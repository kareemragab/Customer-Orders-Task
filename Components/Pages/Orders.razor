@page "/orders"
@using CustomerOrders.Models
@using DevExpress.Xpo
@using Microsoft.JSInterop
@using System.Linq
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="NavigateToAdd">Add New Order</button>
</div>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Order Number</th>
                <th>Customer</th>
                <th>Order Date</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderNumber</td>
                    <td>@order.Customer?.Name</td>
                    <td>@order.OrderDate.ToString("MM/dd/yyyy")</td>
                    <td>@order.Description</td>
                    <td>@order.Amount.ToString("N2") EGP</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => NavigateToEdit(order.Oid)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteOrder(order.Oid)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Order> orders;

    protected override void OnInitialized()
    {
        LoadOrders();
    }

    private void LoadOrders()
    {
        using (var uow = new UnitOfWork())
        {
            orders = new XPQuery<Order>(uow)
                .OrderByDescending(o => o.Oid)
                .ToList();
        }
    }

    private void NavigateToAdd()
    {
        Navigation.NavigateTo("/orders/add");
    }

    private void NavigateToEdit(int oid)
    {
        Navigation.NavigateTo($"/orders/edit/{oid}");
    }

    private async Task DeleteOrder(int oid)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order?");
        if (confirmed)
        {
            using (var uow = new UnitOfWork())
            {
                var order = uow.GetObjectByKey<Order>(oid);
                if (order != null)
                {
                    uow.Delete(order);
                    uow.CommitChanges();
                    LoadOrders();
                }
            }
        }
    }
}
